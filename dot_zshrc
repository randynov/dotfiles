#!/bin/zsh

# Hybrid zsh configuration - best of both worlds
# Comment out profiling for daily use
# zmodload zsh/zprof

# ================================================
# CORE CONFIGURATION
# ================================================

# Set color standards
export TERM="xterm-256color"
export DEFAULT_USER=randallnoval

# ================================================
# PATH CONFIGURATION
# ================================================

# Single PATH modification with deduplication
path=(
  /usr/local/sbin
  $HOME/Library/Python/3.9/bin
  $HOME/.codeium/windsurf/bin
  /usr/local/bin
  /opt/homebrew/bin
  $HOME/.zsh
  $path
)
typeset -U path
export PATH

# ================================================
# COMPLETIONS & ENHANCED FEATURES
# ================================================

# Enhanced completion system
autoload -Uz compinit
compinit -C

# Load additional completion modules
autoload -U +X bashcompinit && bashcompinit

# Enable git completions
if [ -f /usr/share/zsh/site-functions/_git ]; then
  autoload -Uz _git
fi

# Enable homebrew completions if available
if type brew &>/dev/null; then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
fi

# Enable completion features
zstyle ':completion:*' menu select
zstyle ':completion:*' group-name ''
zstyle ':completion:*:descriptions' format '%F{yellow}-- %d --%f'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'

# File and directory completion
zstyle ':completion:*' file-sort modification
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'

# Directory completion
zstyle ':completion:*:cd:*' tag-order local-directories directory-stack path-directories
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
zstyle ':completion:*' squeeze-slashes true

# Enable approximate matching
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

# Enhanced colored man pages (replaces colored-man-pages plugin)
export MANPAGER="bat --language man --style plain"
export MANROFFOPT="-c"

# macOS-specific functions (replaces macos plugin)
ofd() { open "${1:-.}" }                    # Open directory in Finder
pfd() { pwd | pbcopy }                      # Print/copy Finder directory
cdf() { cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')" } # cd to Finder location
quick-look() { qlmanage -p "$@" >& /dev/null }  # Quick Look files
showfiles() { defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder }
hidefiles() { defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder }

# Aliases moved to .zalias for better organization

# ================================================
# VERSION MANAGERS
# ================================================

# Lazy Load mise - Unified version manager
function mise() {
  unset -f mise
  eval "$($HOME/.local/bin/mise activate zsh)"
  mise "$@"
}

# Migration reminder aliases for replaced tools
alias nvm='echo "ðŸ”„ Use mise instead: mise install node@version, mise use node@version, mise ls node"; false'
alias rbenv='echo "ðŸ”„ Use mise instead: mise install ruby@version, mise use ruby@version, mise ls ruby"; false'

# Conda - Python environment management (lazy loading)
function _conda_lazy_init() {
  if [ -f "/opt/anaconda3/etc/profile.d/conda.sh" ]; then
    . "/opt/anaconda3/etc/profile.d/conda.sh"
  else
    export PATH="/opt/anaconda3/bin:$PATH"
  fi
  unset -f _conda_lazy_init conda
  conda "$@"
}
alias conda='_conda_lazy_init'

# pyenv - Only initialize if installed
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# ================================================
# ZSH ENHANCEMENTS
# ================================================

# History configuration
HISTFILE="$HOME/.zsh_history"
HISTSIZE=50000
SAVEHIST=50000
setopt HIST_VERIFY
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS
setopt HIST_IGNORE_SPACE

# Directory options
setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
setopt PUSHD_SILENT

# Completion enhancements
setopt COMPLETE_IN_WORD
setopt ALWAYS_TO_END
setopt PATH_DIRS
setopt AUTO_MENU
setopt AUTO_LIST
setopt AUTO_PARAM_SLASH
setopt AUTO_PARAM_KEYS

# Globbing
setopt EXTENDED_GLOB
setopt NOMATCH

# Key bindings (emacs style)
bindkey -e
bindkey '^[[1;5C' forward-word      # Ctrl+Right
bindkey '^[[1;5D' backward-word     # Ctrl+Left
bindkey '^[[3~' delete-char         # Delete key

# URL quote magic for better URL handling
autoload -U url-quote-magic bracketed-paste-magic
zle -N self-insert url-quote-magic
zle -N bracketed-paste bracketed-paste-magic

# Completion settings moved to top of file

# ================================================
# TOOL INITIALIZATION
# ================================================

# Google Cloud SDK
if [ -f "$HOME/Code/google-cloud-sdk/path.zsh.inc" ]; then
  . "$HOME/Code/google-cloud-sdk/path.zsh.inc"
fi
if [ -f "$HOME/Code/google-cloud-sdk/completion.zsh.inc" ]; then
  . "$HOME/Code/google-cloud-sdk/completion.zsh.inc"
fi

# FZF integration
if [ -f ~/.fzf.zsh ]; then
  source ~/.fzf.zsh
fi

# Initialize tools with fallback loading
(( $+commands[atuin] )) && eval "$(atuin init zsh)"
(( $+commands[thefuck] )) && eval "$(thefuck --alias)"
eval "$(starship init zsh)"

# ================================================
# LOAD ALIASES
# ================================================

# Load your custom aliases file
if [[ -f ~/.zalias ]]; then
    source ~/.zalias
fi

# ================================================
# ENVIRONMENT VARIABLES
# ================================================

# Fix WeasyPrint library linking for Homebrew on Apple Silicon
export DYLD_LIBRARY_PATH="/opt/homebrew/lib:$DYLD_LIBRARY_PATH"
export PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:$PKG_CONFIG_PATH"
export GEMINI_SANDBOX=true

# Editor configuration
export EDITOR="vim"
export VISUAL="$EDITOR"

# Less configuration for better viewing
export LESS="-R -M -i -j.5"
export LESSHISTFILE="-"

# ================================================
# CUSTOM CONFIGURATIONS
# ================================================

# Claude wrapper function
source "$HOME/.config/zsh/claude-wrapper.zsh"

# Custom functions
extract() {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2)   tar xjf "$1"     ;;
      *.tar.gz)    tar xzf "$1"     ;;
      *.bz2)       bunzip2 "$1"     ;;
      *.rar)       unrar x "$1"     ;;
      *.gz)        gunzip "$1"      ;;
      *.tar)       tar xf "$1"      ;;
      *.tbz2)      tar xjf "$1"     ;;
      *.tgz)       tar xzf "$1"     ;;
      *.zip)       unzip "$1"       ;;
      *.Z)         uncompress "$1"  ;;
      *.7z)        7z x "$1"        ;;
      *)           echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

mkcd() {
  mkdir -p "$1" && cd "$1"
}

# Better find function
ff() {
  find . -type f -name "*$1*" 2>/dev/null
}

# Process management
psg() {
  ps aux | grep -v grep | grep "$1"
}

# Show profiling results (comment out after debugging)
# zprof

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

# Load plugins with turbo mode for faster startup
zinit wait lucid for \
        zdharma-continuum/fast-syntax-highlighting \
        zsh-users/zsh-autosuggestions

alias claude="/Users/randallnoval/.claude/local/claude"

[[ "$TERM_PROGRAM" == "kiro" ]] && . "$(kiro --locate-shell-integration-path zsh)"
