#!/bin/bash

# Starship Prompt Design Wizard
# Interactive configuration builder for starship prompts

clear
echo "üöÄ Starship Prompt Design Wizard"
echo "================================="
echo ""
echo "This wizard will help you design a custom starship prompt."
echo "Your current configuration will be backed up automatically."
echo ""

# Backup current config
if [ -f "$HOME/.config/starship.toml" ]; then
    cp "$HOME/.config/starship.toml" "$HOME/.config/starship.toml.backup.$(date +%Y%m%d_%H%M%S)"
    echo "‚úÖ Backed up current starship.toml"
fi

echo ""
echo "Let's start designing your prompt!"
echo ""

# Step 1: Choose layout style
echo "üìê STEP 1: Choose your prompt layout"
echo "===================================="
echo ""
echo "1) Single line   [user@host ~/code/project main ‚óè ]‚ùØ "
echo "2) Two line      [user@host ~/code/project"
echo "                  main ‚óè ]‚ùØ "
echo "3) Compact       [~/project main‚óè]‚ùØ "
echo "4) Powerline     [   user@host    ~/code/project    main ‚óè  ]"
echo "5) Minimal       [~/project]‚ùØ "
echo "6) Custom        Design your own layout"
echo ""
read -p "Choose layout (1-6): " layout_choice

# Step 2: Choose segments
echo ""
echo "üß© STEP 2: Choose prompt segments"
echo "================================="
echo ""
echo "Essential segments (always included):"
echo "‚úì Directory path"
echo "‚úì Git branch/status"
echo "‚úì Command status"
echo ""
echo "Optional segments (check all you want):"
echo ""

# Create segment options (compatible with all shells)
segment_names=(
    "OS icon (üçé/üêß/ü™ü)"
    "Username" 
    "Hostname"
    "Current time"
    "Command execution time"
    "Background jobs"
    "Battery level"
    "Memory usage"
    "Python version"
    "Node.js version"
    "Go version"
    "Rust version"
    "Docker context"
    "Kubernetes context"
    "AWS profile"
    "Google Cloud project"
)

segment_keys=(
    "os"
    "username"
    "hostname"
    "time"
    "cmd_duration"
    "jobs"
    "battery"
    "memory"
    "python"
    "nodejs"
    "golang"
    "rust"
    "docker"
    "kubernetes"
    "aws"
    "gcloud"
)

selected_segments=()

echo "Available segments:"
for i in "${!segment_names[@]}"; do
    echo "$((i+1))) ${segment_names[$i]}"
done

echo ""
read -p "Enter segment numbers (e.g., 1,3,5,7) or 'all' for all segments: " segment_input

if [ "$segment_input" = "all" ]; then
    selected_segments=("${segment_keys[@]}")
else
    IFS=',' read -ra NUMS <<< "$segment_input"
    for num in "${NUMS[@]}"; do
        # Remove any whitespace
        num=$(echo "$num" | tr -d ' ')
        if [[ $num =~ ^[0-9]+$ ]] && [ $num -le ${#segment_keys[@]} ] && [ $num -gt 0 ]; then
            selected_segments+=("${segment_keys[$((num-1))]}")
        fi
    done
fi

# Step 3: Choose color scheme
echo ""
echo "üé® STEP 3: Choose color scheme"
echo "=============================="
echo ""
echo "1) Default      Standard starship colors"
echo "2) Dark         Dark background optimized"
echo "3) Light        Light background optimized"
echo "4) Ocean        Blue ocean theme"
echo "5) Forest       Green forest theme"
echo "6) Sunset       Orange/red sunset theme"
echo "7) Monochrome   Black and white"
echo "8) Neon         Bright neon colors"
echo "9) Keep Current Keep your existing colors"
echo "10) Custom      Define your own colors"
echo ""
read -p "Choose color scheme (1-10): " color_choice

# Step 4: Choose symbols/icons
echo ""
echo "üî§ STEP 4: Choose symbols and icons"
echo "==================================="
echo ""
echo "1) Nerd Fonts   Full icon set (requires Nerd Font)"
echo "2) Unicode      Basic unicode symbols"
echo "3) ASCII        ASCII-only characters"
echo "4) Custom       Choose specific symbols"
echo ""
read -p "Choose symbol style (1-4): " symbol_choice

# Step 5: Performance settings
echo ""
echo "‚ö° STEP 5: Performance settings"
echo "==============================="
echo ""
echo "1) Fast         Quick startup, fewer features"
echo "2) Balanced     Good balance of features and speed"
echo "3) Full         All features, may be slower"
echo "4) Custom       Set specific timeouts"
echo ""
read -p "Choose performance level (1-4): " perf_choice

# Generate configuration
echo ""
echo "üîß Generating your starship configuration..."
echo ""

# Start building the config
config_content="# Custom Starship Configuration
# Generated by Starship Wizard on $(date)

"

# Add performance settings
case $perf_choice in
    1)
        config_content+="# Fast performance settings
scan_timeout = 10
command_timeout = 250
add_newline = false

"
        ;;
    2)
        config_content+="# Balanced performance settings
scan_timeout = 30
command_timeout = 500
add_newline = true

"
        ;;
    3)
        config_content+="# Full feature settings
scan_timeout = 100
command_timeout = 1000
add_newline = true

"
        ;;
    4)
        echo "Enter scan timeout (ms, default 30):"
        read scan_timeout
        scan_timeout=${scan_timeout:-30}
        echo "Enter command timeout (ms, default 500):"
        read cmd_timeout
        cmd_timeout=${cmd_timeout:-500}
        config_content+="# Custom performance settings
scan_timeout = $scan_timeout
command_timeout = $cmd_timeout
add_newline = true

"
        ;;
esac

# Add layout configuration
case $layout_choice in
    1)
        # Single line
        config_content+='# Single line layout
format = "$all$character"

'
        ;;
    2)
        # Two line
        config_content+='# Two line layout
format = """
$all$line_break$character"""

'
        ;;
    3)
        # Compact
        config_content+='# Compact layout
format = "$directory$git_branch$git_status$character"

[directory]
truncation_length = 1
truncate_to_repo = true

'
        ;;
    4)
        # Powerline
        config_content+='# Powerline layout
format = """
$username$hostname$directory$git_branch$git_status$line_break$character"""

[username]
format = "[$user]($style)"
show_always = true

[hostname]
format = "[@$hostname]($style)"

'
        ;;
    5)
        # Minimal
        config_content+='# Minimal layout
format = "$directory$git_branch$character"

[directory]
truncation_length = 2
format = "[$path]($style)"

[git_branch]
format = "[$branch]($style)"

'
        ;;
    6)
        # Custom layout
        echo ""
        echo "Custom layout options:"
        echo "Available variables: \$username \$hostname \$directory \$git_branch \$git_status"
        echo "Special: \$line_break \$character \$all"
        echo ""
        echo "Example: \$username@\$hostname \$directory \$git_branch\$line_break\$character"
        echo ""
        read -p "Enter your custom format string: " custom_format
        config_content+="# Custom layout
format = \"$custom_format\"

"
        ;;
esac

# Add color scheme
case $color_choice in
    1|9) # Default or keep current - no palette needed
        ;;
    2) # Dark
        config_content+='palette = "dark"

[palettes.dark]
background = "#1e1e1e"
foreground = "#d4d4d4"
primary = "#569cd6"
secondary = "#4ec9b0"
accent = "#f44747"
muted = "#6a6a6a"

'
        ;;
    3) # Light
        config_content+='palette = "light"

[palettes.light]
background = "#ffffff"
foreground = "#333333"
primary = "#0066cc"
secondary = "#008080"
accent = "#cc0000"
muted = "#999999"

'
        ;;
    4) # Ocean
        config_content+='palette = "ocean"

[palettes.ocean]
blue = "#0077be"
teal = "#008080"
navy = "#001f3f"
cyan = "#7fdbff"
white = "#ffffff"

'
        ;;
    5) # Forest
        config_content+='palette = "forest"

[palettes.forest]
green = "#2ecc40"
dark_green = "#006400"
lime = "#32cd32"
brown = "#8b4513"
white = "#ffffff"

'
        ;;
    6) # Sunset
        config_content+='palette = "sunset"

[palettes.sunset]
orange = "#ff851b"
red = "#ff4136"
yellow = "#ffdc00"
pink = "#ff69b4"
white = "#ffffff"

'
        ;;
    7) # Monochrome
        config_content+='palette = "mono"

[palettes.mono]
white = "#ffffff"
gray = "#888888"
black = "#000000"
light_gray = "#cccccc"
dark_gray = "#444444"

'
        ;;
    8) # Neon
        config_content+='palette = "neon"

[palettes.neon]
electric_blue = "#00ffff"
neon_green = "#39ff14"
hot_pink = "#ff1493"
bright_yellow = "#ffff00"
white = "#ffffff"

'
        ;;
    10) # Custom colors
        echo ""
        echo "Define your custom colors (hex format, e.g., #ff0000):"
        read -p "Primary color: " primary_color
        read -p "Secondary color: " secondary_color
        read -p "Accent color: " accent_color
        config_content+='palette = "custom"

[palettes.custom]
primary = "'$primary_color'"
secondary = "'$secondary_color'"
accent = "'$accent_color'"

'
        ;;
esac

# Add segment configurations for selected segments
for segment in "${selected_segments[@]}"; do
    case $segment in
        os)
            config_content+='[os]
disabled = false
format = "[$symbol]($style)"

'
            ;;
        username)
            config_content+='[username]
disabled = false
format = "[$user]($style)"
show_always = true

'
            ;;
        hostname)
            config_content+='[hostname]
disabled = false
format = "[@$hostname]($style)"

'
            ;;
        time)
            config_content+='[time]
disabled = false
format = "[$time]($style)"
time_format = "%H:%M"

'
            ;;
        cmd_duration)
            config_content+='[cmd_duration]
disabled = false
format = "[‚è± $duration]($style)"
min_time = 1000

'
            ;;
        jobs)
            config_content+='[jobs]
disabled = false
format = "[$symbol$number]($style)"

'
            ;;
        battery)
            config_content+='[battery]
disabled = false
format = "[$symbol$percentage]($style)"

[[battery.display]]
threshold = 30
style = "bold red"

'
            ;;
        memory)
            config_content+='[memory_usage]
disabled = false
format = "[${ram}]($style)"
threshold = 70

'
            ;;
        python)
            if [ "$symbol_choice" = "1" ]; then
                config_content+="[python]
disabled = false
format = \"[\$symbol\$version](\$style)\"
symbol = \" \"

"
            else
                config_content+="[python]
disabled = false
format = \"[\$symbol\$version](\$style)\"

"
            fi
            ;;
        nodejs)
            if [ "$symbol_choice" = "1" ]; then
                config_content+="[nodejs]
disabled = false
format = \"[\$symbol\$version](\$style)\"
symbol = \" \"

"
            else
                config_content+="[nodejs]
disabled = false
format = \"[\$symbol\$version](\$style)\"

"
            fi
            ;;
        golang)
            if [ "$symbol_choice" = "1" ]; then
                config_content+="[golang]
disabled = false
format = \"[\$symbol\$version](\$style)\"
symbol = \" \"

"
            else
                config_content+="[golang]
disabled = false
format = \"[\$symbol\$version](\$style)\"

"
            fi
            ;;
        rust)
            if [ "$symbol_choice" = "1" ]; then
                config_content+="[rust]
disabled = false
format = \"[\$symbol\$version](\$style)\"
symbol = \" \"

"
            else
                config_content+="[rust]
disabled = false
format = \"[\$symbol\$version](\$style)\"

"
            fi
            ;;
        docker)
            config_content+='[docker_context]
disabled = false
format = "[üê≥ $context]($style)"

'
            ;;
        kubernetes)
            config_content+='[kubernetes]
disabled = false
format = "[‚éà $context]($style)"

'
            ;;
        aws)
            config_content+='[aws]
disabled = false
format = "[‚òÅÔ∏è $profile]($style)"

'
            ;;
        gcloud)
            config_content+='[gcloud]
disabled = false
format = "[‚òÅÔ∏è $project]($style)"

'
            ;;
    esac
done

# Add symbol configurations - integrate with existing sections
case $symbol_choice in
    1) # Nerd Fonts - symbols are added inline with segments
        config_content+='# Nerd Font symbols applied inline

'
        ;;
    2) # Unicode
        config_content+='# Unicode symbols
[git_branch]
symbol = "üåø "

[python]
symbol = "üêç "

[nodejs]
symbol = "‚¨¢ "

'
        ;;
    3) # ASCII
        config_content+='# ASCII symbols
[git_branch]
symbol = "git:"

[character]
success_symbol = "[>](bold green)"
error_symbol = "[>](bold red)"

'
        ;;
    4) # Custom symbols
        echo ""
        echo "Define custom symbols:"
        read -p "Git branch symbol: " git_symbol
        read -p "Success prompt symbol: " success_symbol
        read -p "Error prompt symbol: " error_symbol
        config_content+="# Custom symbols
[git_branch]
symbol = \"$git_symbol \"

[character]
success_symbol = \"[$success_symbol](bold green)\"
error_symbol = \"[$error_symbol](bold red)\"

"
        ;;
esac

# Write the configuration
mkdir -p "$HOME/.config"
echo "$config_content" > "$HOME/.config/starship.toml"

echo "‚úÖ Configuration generated!"
echo ""
echo "üìÅ Configuration saved to: ~/.config/starship.toml"
echo ""
echo "üéØ To see your new prompt:"
echo "   source ~/.zshrc"
echo "   # or restart your terminal"
echo ""
echo "üîß To edit further:"
echo "   starship config"
echo "   # or edit ~/.config/starship.toml directly"
echo ""
echo "üìö For more options visit: https://starship.rs/config/"
echo ""

# Offer to show preview
read -p "Would you like to see a preview of your configuration? (y/n): " show_preview

if [ "$show_preview" = "y" ] || [ "$show_preview" = "Y" ]; then
    echo ""
    echo "üìã Your starship.toml preview:"
    echo "=============================="
    head -30 "$HOME/.config/starship.toml"
    echo ""
    echo "(showing first 30 lines - full config saved to ~/.config/starship.toml)"
fi

echo ""
echo "üéâ Starship wizard complete! Enjoy your new prompt!"